/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dldsimulator;

import javax.swing.*;
import javax.swing.UIManager.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.*;
import devices.*;
/**
 *
 * @author amlansaha
 */
public class MainFrame extends JFrame {

    /**
     * Creates new form MainFrame
     */
    public static ModeEnum mode;
    public static DeviceEnum currentDev;
    public static MouseEvent pressed, dragged, click, released, mouseMove;
    public Circuit ckt;
    public Device pressedDevice, releasedDevice;
    public Wire pressedWire, releasedWire;
    public int numberOfInput;
    private Device selectedDevice;
    
    public MainFrame() {
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.wire;
        ckt = new Circuit();
        numberOfInput = 2;
        
        try {
            numberOfInput = 1/0;
            for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                SwingUtilities.updateComponentTreeUI(this);
            }
            catch(Exception ee)  {
                ee.printStackTrace();
            }
        }
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        gatePanel = new javax.swing.JPanel();
        andButton = new javax.swing.JButton();
        orButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        inputNumbers = new javax.swing.JComboBox();
        xorButton = new javax.swing.JButton();
        notButton = new javax.swing.JButton();
        nandButton = new javax.swing.JButton();
        norButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        switchButton = new javax.swing.JButton();
        wireButton = new javax.swing.JButton();
        ledButton = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        selectButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        runButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        cktPanel = new CircuitPanel(ckt);
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenuItem = new javax.swing.JMenu();
        newCircuit = new javax.swing.JMenuItem();
        openCircuit = new javax.swing.JCheckBoxMenuItem();
        saveCircuit = new javax.swing.JCheckBoxMenuItem();
        editMenuItem = new javax.swing.JMenu();
        selectMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        clearMenuItem = new javax.swing.JMenuItem();
        simulateMenu = new javax.swing.JMenu();
        runMenuItem = new javax.swing.JMenuItem();
        stopMenuItem = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("File");
        jMenuBar2.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar2.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Digital Logic Design Simulator (Server Edition)");
        setMinimumSize(new java.awt.Dimension(700, 600));
        setName("mainFrame"); // NOI18N

        gatePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gatePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        andButton.setText("AND");
        andButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andButtonActionPerformed(evt);
            }
        });

        orButton.setText("OR");
        orButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Input Lines:");

        inputNumbers.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5" }));
        inputNumbers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inputNumbersItemStateChanged(evt);
            }
        });

        xorButton.setText("XOR");
        xorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xorButtonActionPerformed(evt);
            }
        });

        notButton.setText("NOT");
        notButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notButtonActionPerformed(evt);
            }
        });

        nandButton.setText("NAND");
        nandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nandButtonActionPerformed(evt);
            }
        });

        norButton.setText("NOR");
        norButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                norButtonActionPerformed(evt);
            }
        });

        switchButton.setText("Switch");
        switchButton.setToolTipText("Switch");
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });

        wireButton.setText("Wire");
        wireButton.setToolTipText("Wire");
        wireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wireButtonActionPerformed(evt);
            }
        });

        ledButton.setText("LED");
        ledButton.setToolTipText("LED");
        ledButton.setFocusable(false);
        ledButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ledButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ledButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gatePanelLayout = new javax.swing.GroupLayout(gatePanel);
        gatePanel.setLayout(gatePanelLayout);
        gatePanelLayout.setHorizontalGroup(
            gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator4)
            .addGroup(gatePanelLayout.createSequentialGroup()
                .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(gatePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(gatePanelLayout.createSequentialGroup()
                                .addComponent(nandButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(norButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(gatePanelLayout.createSequentialGroup()
                                .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(xorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(andButton, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(orButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(notButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputNumbers, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(gatePanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ledButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(wireButton, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(switchButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gatePanelLayout.setVerticalGroup(
            gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gatePanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(andButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(norButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wireButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(switchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ledButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jToolBar1.setRollover(true);

        selectButton.setText("Select");
        selectButton.setToolTipText("Select");
        selectButton.setFocusable(false);
        selectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(selectButton);

        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Delete");
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteButton);

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear Circuit Diagram");
        clearButton.setFocusable(false);
        clearButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(clearButton);
        jToolBar1.add(jSeparator3);

        runButton.setText("Run");
        runButton.setToolTipText("Simulate");
        runButton.setFocusable(false);
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(runButton);

        stopButton.setText("Stop");
        stopButton.setToolTipText("Simulate");
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(stopButton);

        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setText("Program Started");

        jScrollPane3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jScrollPane3.setAutoscrolls(true);
        jScrollPane3.setMaximumSize(new java.awt.Dimension(1920, 1080));

        cktPanel.setBackground(new java.awt.Color(253, 254, 238));
        cktPanel.setToolTipText("");
        cktPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cktPanel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        cktPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                circuitPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                circuitPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cktPanelMouseReleased(evt);
            }
        });
        cktPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                circuitPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                circuitPanelMouseMoved(evt);
            }
        });
        cktPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                circuitPanelComponentAdded(evt);
            }
        });
        cktPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                circuitPanelFocusGained(evt);
            }
        });

        javax.swing.GroupLayout cktPanelLayout = new javax.swing.GroupLayout(cktPanel);
        cktPanel.setLayout(cktPanelLayout);
        cktPanelLayout.setHorizontalGroup(
            cktPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1920, Short.MAX_VALUE)
        );
        cktPanelLayout.setVerticalGroup(
            cktPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1080, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(cktPanel);

        fileMenuItem.setText("File");

        newCircuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newCircuit.setText("New Circuit");
        newCircuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCircuitActionPerformed(evt);
            }
        });
        fileMenuItem.add(newCircuit);

        openCircuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openCircuit.setText("Open");
        openCircuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCircuitActionPerformed(evt);
            }
        });
        fileMenuItem.add(openCircuit);

        saveCircuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveCircuit.setText("Save");
        saveCircuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCircuitActionPerformed(evt);
            }
        });
        fileMenuItem.add(saveCircuit);

        jMenuBar1.add(fileMenuItem);

        editMenuItem.setText("Edit");

        selectMenuItem.setText("Select a device");
        selectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectMenuItemActionPerformed(evt);
            }
        });
        editMenuItem.add(selectMenuItem);

        deleteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        deleteMenuItem.setText("Delete selected device");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        editMenuItem.add(deleteMenuItem);

        clearMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.SHIFT_MASK));
        clearMenuItem.setText("Clear Circuit");
        clearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMenuItemActionPerformed(evt);
            }
        });
        editMenuItem.add(clearMenuItem);

        jMenuBar1.add(editMenuItem);

        simulateMenu.setText("Simulate");

        runMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        runMenuItem.setText("Simulate/Run");
        runMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMenuItemActionPerformed(evt);
            }
        });
        simulateMenu.add(runMenuItem);

        stopMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        stopMenuItem.setText("Stop simulating");
        stopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopMenuItemActionPerformed(evt);
            }
        });
        simulateMenu.add(stopMenuItem);

        jMenuBar1.add(simulateMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(gatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void writeToFile()   {
//        TODO implemented
        
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File( "./") );
        int actionDialog = chooser.showSaveDialog(this);
        if(actionDialog == JFileChooser.APPROVE_OPTION){
            File fileName = new File(chooser.getSelectedFile()+".ser");
            if(fileName == null){
                return;
            }
            int n=0;
            while(n==0){
                if(fileName.exists()){
                    actionDialog = JOptionPane.showConfirmDialog(this,"Replace existing file?");
                    if (actionDialog == JOptionPane.NO_OPTION){
                        chooser.showSaveDialog(this);
                        fileName = new File(chooser.getSelectedFile()+".ser");
                        chooser.getSelectedFile().getName();
                    }
                    else if(actionDialog == JOptionPane.YES_OPTION){
                        try {
                            Circuit ckt2 = new Circuit();
                            ckt2=this.ckt;
                            FileOutputStream fos = new FileOutputStream(fileName);
                            this.ckt.name = fileName.getName();
                            ObjectOutputStream oos = new ObjectOutputStream(fos);
                            oos.writeObject(ckt2);
                            oos.flush();
                            oos.close();
                        }
                        catch(IOException e) {
                            System.out.println("Exception during serialization: " + e);
                            System.exit(0);
                        }
                        n=1;
                    }
                    else if(actionDialog == JOptionPane.CANCEL_OPTION){
                        n=1;
                    }
                }
                else{
                    try {
                        Circuit ckt2 = new Circuit();
                        ckt2=this.ckt;
                        FileOutputStream fos = new FileOutputStream(fileName);
                        this.ckt.name = fileName.getName();
                        ObjectOutputStream oos = new ObjectOutputStream(fos);
                        oos.writeObject(ckt2);
                        oos.flush();
                        oos.close();
                        statusLabel.setText("File saved.");
                    }
                    catch(IOException e) {
                        System.out.println("Exception during serialization: ");
                        e.printStackTrace();
//                        System.exit(0);
                    }
                    n=1;
                }
            }
        }
    }
    
    public void readToFile() {
//        ckt = new Circuit(ck3);
    }
    
    public void setCkt(Circuit ckt) {
        this.ckt.copy(ckt);
    }
    
    public Circuit getCkt() {
        return this.ckt;
    }
    
    private void newCircuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCircuitActionPerformed
        // TODO add your handling code here:
        System.out.println("MENU");
    }//GEN-LAST:event_newCircuitActionPerformed

    private void andButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andButtonActionPerformed
        if ( mode == ModeEnum.run ) {
            statusLabel.setText("Click on the STOP button to start drawing mode.");
            return;
        }
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.and;
        statusLabel.setText("And gate drawing mode.");
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"2", "3", "4", "5"}));
        numberOfInput = 2;
    }//GEN-LAST:event_andButtonActionPerformed

    private void notButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notButtonActionPerformed
        if ( mode == ModeEnum.run ) {
            statusLabel.setText("Click on the STOP button to start drawing mode.");
            return;
        }
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.not;
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"1"}));
        statusLabel.setText("Not gate drawing mode.");
        numberOfInput = 1;
    }//GEN-LAST:event_notButtonActionPerformed

    private void orButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orButtonActionPerformed
        if ( mode == ModeEnum.run ) {
            statusLabel.setText("Click on the STOP button to start drawing mode.");
            return;
        }
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.or;
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"2", "3", "4", "5"}));
        statusLabel.setText("Or gate drawing mode.");
        numberOfInput = 2;
    }//GEN-LAST:event_orButtonActionPerformed

    private void nandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nandButtonActionPerformed
        if ( mode == ModeEnum.run ) {
            statusLabel.setText("Click on the STOP button to start drawing mode.");
            return;
        }
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.nand;
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"2", "3", "4", "5"}));
        statusLabel.setText("Nand gate drawing mode.");
    }//GEN-LAST:event_nandButtonActionPerformed

    private void norButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_norButtonActionPerformed
        if ( mode == ModeEnum.run ) {
            statusLabel.setText("Click on the STOP button to start drawing mode.");
            return;
        }
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.nor;
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"2", "3", "4", "5"}));
        statusLabel.setText("Nor gate drawing mode.");
        numberOfInput = 2;
    }//GEN-LAST:event_norButtonActionPerformed

    private void xorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xorButtonActionPerformed
        if ( mode == ModeEnum.run ) {
            statusLabel.setText("Click on the STOP button to start drawing mode.");
            return;
        }
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.xor;
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"2", "3", "4", "5"}));
        statusLabel.setText("Xor gate drawing mode.");
        numberOfInput = 2;
    }//GEN-LAST:event_xorButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        if ( mode == ModeEnum.run ) {
            statusLabel.setText("Click on the STOP button to select anything.");
            return;
        }
        mode = ModeEnum.select;
        statusLabel.setText("Click on a device to select it.");
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"---"}));
    }//GEN-LAST:event_selectButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if ( mode != ModeEnum.select )  return;
        if ( selectedDevice != null )   {
            if ( ckt.deleteDevice(selectedDevice) == false ) 
                System.out.println("The device could not be deleted.");
        }
        cktPanel.repaint();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void ledButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledButtonActionPerformed
        // TODO add your handling code here:
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.led;
        numberOfInput = 1;
        statusLabel.setText("LED");
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"---"}));
    }//GEN-LAST:event_ledButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        if ( !ckt.isValid() )   {
            JOptionPane.showMessageDialog(null, "Incomplete circuit.");
            return;
        }
        if ( mode == ModeEnum.run ) return;
        mode = ModeEnum.run;
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"---"}));
        statusLabel.setText("Simulating circuit.");
        int l = ckt.source.size();
        for ( int i = 0; i < l; i++ )   {
            Source s = ckt.source.get(i);
            s.setOutput(false);
        }
        cktPanel.repaint();
    }//GEN-LAST:event_runButtonActionPerformed

    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchButtonActionPerformed
        // TODO add your handling code here:
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.source;
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"---"}));
    }//GEN-LAST:event_switchButtonActionPerformed

    private void wireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wireButtonActionPerformed
        // TODO add your handling code here:
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.wire;
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"---"}));
    }//GEN-LAST:event_wireButtonActionPerformed

    private void circuitPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_circuitPanelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_circuitPanelFocusGained

    private void circuitPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_circuitPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_circuitPanelComponentAdded

    private void circuitPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_circuitPanelMouseMoved
        // TODO add your handling code here:
        mouseMove = evt;
//        pressed = null;
//        int input = Integer.parseInt(inputNumbers.getActionCommand());
        if ( mode == ModeEnum.drawing ) {
            if ( currentDev != DeviceEnum.wire )    {
                ckt.setTemp(mouseMove, numberOfInput);
            }
            else    {
                Coordinate c = new Coordinate(evt);
                Device temp = ckt.searchForDevice(c);

                System.out.println("is on device? : "+(temp != null));
                if ( temp != null ) {
                    int indx = temp.isOnInLeg(c);
                    if ( indx > -1 )    ckt.pointFlag = true;
                    else if ( temp.isOnOutLeg(c) )  {
                        System.out.println("is on out leg...");
                        ckt.pointFlag = true;
                    }
                    else    ckt.pointFlag = false;
                }
                else    ckt.pointFlag = false;
            }
        }
        else if ( mode == ModeEnum.run )    {
            Coordinate c = new Coordinate(evt);
            Device temp = ckt.searchForSource(c);
            if ( temp != null ) {
                cktPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
            else    {
                cktPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
        cktPanel.repaint();
        
    }//GEN-LAST:event_circuitPanelMouseMoved

    private void circuitPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_circuitPanelMouseDragged
        // TODO add your handling code here:
        dragged = evt;
        ckt.end = new Coordinate(dragged);
        cktPanel.repaint();
    }//GEN-LAST:event_circuitPanelMouseDragged

    private void circuitPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_circuitPanelMousePressed
        // TODO add your handling code here:
        if ( mode == ModeEnum.drawing )  {
            if ( currentDev == DeviceEnum.wire )    {
                Device d = ckt.searchForDevice(new Coordinate(evt));
                if ( d != null )    {
                    int indx = d.isOnInLeg(new Coordinate(evt));
                    if ( indx > -1 || d.isOnOutLeg(new Coordinate(evt)))    {
                        pressed = evt;
                        pressedDevice = d;
                        ckt.start = new Coordinate(pressed);
                    }
                    else {
                        pressed = null;
                        pressedDevice = null;
                        pressedWire = null;
                    }
                }
                else    {
                    Wire w = ckt.searchForWire(new Coordinate(evt));
                    if ( w != null )    {
                        pressed = evt;
                        pressedWire = w;
                        ckt.start = new Coordinate(pressed);
                    }
                    else {
                        pressed = null;
                        ckt.start = null;
                        pressedWire = null;
                    }
                }
            }
        }
    }//GEN-LAST:event_circuitPanelMousePressed

    private void circuitPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_circuitPanelMouseClicked
        // TODO add your handling code here:
        if ( mode == ModeEnum.drawing ) {
            ckt.placeTemp();
            currentDev = DeviceEnum.wire;
            statusLabel.setText("Wire mode.");
        }
        else if ( mode == ModeEnum.run )    {
            Source s = ckt.searchForSource(new Coordinate(evt));
            if ( s != null )    s.toggleOutput();
        }
        else if ( mode == ModeEnum.select ) {
            if ( selectedDevice != null )   {
                selectedDevice.setSelected(false);
                selectedDevice = null;
            }
            Coordinate cd = new Coordinate(evt);
            Device d = ckt.searchForDevice(cd);
            if ( d == null )    d = ckt.searchForSource(cd);
            if ( d == null )    return;
            d.setSelected(true);
            selectedDevice = d;
            System.out.println("The selected device is: "+selectedDevice.getClass().toString());
        }
        cktPanel.repaint();
    }//GEN-LAST:event_circuitPanelMouseClicked

    private void inputNumbersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inputNumbersItemStateChanged
        // TODO add your handling code here:
        this.numberOfInput = Integer.parseInt((String) evt.getItem());
        try {
            ckt.getTemp().setInputCount(numberOfInput);
        }   catch(Exception e)  {}
    }//GEN-LAST:event_inputNumbersItemStateChanged

    private void openCircuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCircuitActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser=new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                Circuit ckt1;
                File file = fileChooser.getSelectedFile();
                FileInputStream fis = new FileInputStream(file);
                ObjectInputStream ois = new ObjectInputStream(fis);
                Circuit ckt2 = (Circuit)ois.readObject();
                ckt.copy(ckt2);
                if ( ckt != null ) {
                    System.out.println(ckt.toString()+"\nckt is not null. ");
                }
                else    System.err.println("ckt is null.");
                cktPanel.repaint();
            }

            catch(Exception e) {
                System.out.println("Exception during deserialization: ");
                statusLabel.setText("Problem in loading file.");
                e.printStackTrace();
            }
        }

        else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openCircuitActionPerformed

    private void saveCircuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCircuitActionPerformed
        // TODO add your handling code here:
        this.writeToFile();
    }//GEN-LAST:event_saveCircuitActionPerformed

    private void cktPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cktPanelMouseReleased
        // TODO add your handling code here:
        dragged = null;
        ckt.end = null;
        if ( mode == ModeEnum.drawing )  {
            if ( currentDev == DeviceEnum.wire )    {
                Device d = ckt.searchForDevice(new Coordinate(evt));
                if ( d != null )    {
                    int indx = d.isOnInLeg(new Coordinate(evt));
                    if ( indx > -1 || d.isOnOutLeg(new Coordinate(evt)))    {
                        System.out.println("is on a device :D");
                        released = evt;
                        releasedDevice = d;
                        ckt.addWire(new Coordinate(pressed), pressedDevice, new Coordinate(released), releasedDevice);
                    }
                    else {
                        released = null;
                        releasedDevice = null;
                    }
                }
                else    {
                    Wire w = ckt.searchForWire(new Coordinate(evt));
                    if ( w != null )    {
                        pressed = evt;
                        pressedWire = w;
                    }
                    else {
                        pressed = null;
                        pressedWire = null;
                    }
                }
            }
        }
        cktPanel.repaint();
    }//GEN-LAST:event_cktPanelMouseReleased

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        mode = ModeEnum.drawing;
        currentDev = DeviceEnum.wire;
        statusLabel.setText("Drawing mode.");
        int l = ckt.source.size();
//        for ( int i = 0; i < l; i++ )   {
//            Source s = ckt.source.get(i);
//            s.setOutput(false);
//        }
        cktPanel.repaint();
        inputNumbers.setModel(new DefaultComboBoxModel(new String[]{"---"}));
    }//GEN-LAST:event_stopButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        int i = JOptionPane.showConfirmDialog(null, "Are you sure to clear the circuit diagram?");
        if ( i == 0 )   ckt.clear();
        cktPanel.repaint();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void selectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectMenuItemActionPerformed
        selectButtonActionPerformed(evt);
    }//GEN-LAST:event_selectMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        deleteButtonActionPerformed(evt);
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void clearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMenuItemActionPerformed
        clearButtonActionPerformed(evt);
    }//GEN-LAST:event_clearMenuItemActionPerformed

    private void runMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMenuItemActionPerformed
        runButtonActionPerformed(evt);
    }//GEN-LAST:event_runMenuItemActionPerformed

    private void stopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopMenuItemActionPerformed
        stopButtonActionPerformed(evt);
    }//GEN-LAST:event_stopMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton andButton;
    private javax.swing.JPanel cktPanel;
    private javax.swing.JButton clearButton;
    private javax.swing.JMenuItem clearMenuItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenuItem;
    private javax.swing.JMenu fileMenuItem;
    private javax.swing.JPanel gatePanel;
    private javax.swing.JComboBox inputNumbers;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton ledButton;
    private javax.swing.JButton nandButton;
    private javax.swing.JMenuItem newCircuit;
    private javax.swing.JButton norButton;
    private javax.swing.JButton notButton;
    private javax.swing.JCheckBoxMenuItem openCircuit;
    private javax.swing.JButton orButton;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem runMenuItem;
    private javax.swing.JCheckBoxMenuItem saveCircuit;
    private javax.swing.JButton selectButton;
    private javax.swing.JMenuItem selectMenuItem;
    private javax.swing.JMenu simulateMenu;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton stopButton;
    private javax.swing.JMenuItem stopMenuItem;
    private javax.swing.JButton switchButton;
    private javax.swing.JButton wireButton;
    private javax.swing.JButton xorButton;
    // End of variables declaration//GEN-END:variables
}
